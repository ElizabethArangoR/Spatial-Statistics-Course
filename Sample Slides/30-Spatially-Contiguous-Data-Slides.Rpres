Spatially Continuous Data I
========================================================
author: Megan Coad and Alexis Polidoro 
date: 
autosize: true

Key Concepts
========================================================

- Exploring spatially continuous data
- Voronoi polygons
- Inverse distance weighting
- K-point means

Exploring Spatially Continuous Data
========================================================
- Think of points as an event 
- Data could be temperature, elevation
- Sampling method is not random, but the VALUE at the sampling site

***
```{r, echo=FALSE}
rm(list = ls())
library(tidyverse)
library(spdep)
library(plotly)
library(deldir)
library(spatstat)
library(geog4ga3)
data("Walker_Lake")
ps1 <- ggplot(data = Walker_Lake, aes (x = X, y = Y, color = V, size = V)) +
  geom_point(alpha = 0.5) + 
  scale_color_distiller(palette = "OrRd", trans = "reverse") +
  coord_equal() #'Coord_equal' ensures that one unit on the x-axis is the same length as one unit on the y-axis

ps1
```

Tile-Based Methods
========================================================
- Another method of gathering spatially continuous data
- Convert points into closely fitted arrangement of shapes
- Example: Voronoi polygons

***

```{r, echo=FALSE}
uv_coords <- data.frame(u = c(0.7, 5.2, 3.3, 1.3, 5.4), v = c(0.5, 1.8, 2.3, 4.8, 5.5))
p <- ggplot(data = uv_coords, aes(x = u, y = v)) + geom_point(size = 2) + coord_equal() +
  xlim(c(0,6)) + ylim(c(0,6))
l2n <- data.frame(u = c(0.7, 5.2, 5.2, 3.3, 1.3, 1.3, 5.4), 
                  uend = c(3.3, 3.3, 5.4, 5.4, 0.7, 3.3, 1.3), 
                  v = c(0.5, 1.8, 1.8, 2.3, 4.8, 4.8, 5.5),
                  vend = c(2.3, 2.3, 5.5, 5.5, 0.5, 2.3, 4.8))
p <- p + geom_segment(data = l2n, aes(x = u, xend = uend, y = v, yend = vend), color = "gray")
uv_coords.sp <- SpatialPointsDataFrame(coords = cbind(x = uv_coords$u, y = uv_coords$v), uv_coords)
vor <- points2voronoi(uv_coords.sp)
vor.t <- fortify(vor)
p + geom_polygon(data = vor.t, aes(x = long, y = lat, group = group),
                 color = "black", fill = NA)
```

Voronoi Polygons
========================================================
- Points closest to original point have the greatest influence
- Representative of the local average

***

```{r, echo=FALSE}
Walker_Lake.sp <- SpatialPointsDataFrame(coords = cbind(X = Walker_Lake$X, 
                                                     Y = Walker_Lake$Y), 
                                      data = Walker_Lake)
Walker_Lake.voronoi <- points2voronoi(Walker_Lake.sp)
Walker_Lake.voronoi.t <- fortify(Walker_Lake.voronoi)
Walker_Lake.voronoi.t <- rename(Walker_Lake.voronoi.t, ID = id)
Walker_Lake.voronoi.t <- left_join(Walker_Lake.voronoi.t, Walker_Lake, by = "ID")
vor.plot <- ggplot(data = Walker_Lake.voronoi.t, aes(x = long, y = lat, group = group,
                                         fill = V)) +
  geom_polygon(color = "white") +
  scale_fill_distiller(palette = "OrRd", trans = "reverse") +
  coord_equal()
vor.plot
```


Problem With Tile-based Approaches
========================================================
- Assume surface is flat --> highly unrealistic 
- Need spatial interpolation method that accounts for variation
- Solution: Inverse-distance weighting

Inverse-Distance Weighting
========================================================

- Assigned values to unknown points are calculated with a weighted average of the values available at the known points
- Gamma determines the value of the weight

***
$$
\hat{z}_p = \frac{\sum_{i=1}^n{w_{pi}z_i}}{\sum_{i=1}^n{w_{pi}}}
$$

$$
w_{pi} = \frac{1}{d_{pi}^\gamma}
$$


IDW Continued...
========================================================
- Smaller gamma flatten predictions, more global average
- Larger gamma shows more local averages

***

```{r, echo=FALSE}
W <- owin(xrange = c(0, 259), yrange = c(0, 299))
Walker_Lake.ppp <- as.ppp(X = Walker_Lake[,2:4], W = W)
z_p.idw1 <- idw(Walker_Lake.ppp, power = 1)
z_p.idw05 <- idw(Walker_Lake.ppp, power = 0.5)
z_p.idw2 <- idw(Walker_Lake.ppp, power = 2)
z_p.idw5 <- idw(Walker_Lake.ppp, power = 5)
z_p.idw05.df <- data.frame(expand.grid(X= z_p.idw05$xcol, Y = z_p.idw05$yrow),
                         V = as.vector(t(z_p.idw05$v)), Power = "P05")
z_p.idw1.df <- data.frame(expand.grid(X= z_p.idw1$xcol, Y = z_p.idw1$yrow),
                         V = as.vector(t(z_p.idw1$v)), Power = "P1")
z_p.idw2.df <- data.frame(expand.grid(X= z_p.idw2$xcol, Y = z_p.idw2$yrow),
                         V = as.vector(t(z_p.idw2$v)), Power = "P2")
z_p.idw5.df <- data.frame(expand.grid(X= z_p.idw5$xcol, Y = z_p.idw5$yrow),
                         V = as.vector(t(z_p.idw5$v)), Power = "P5")
idw_df <- rbind(z_p.idw05.df, z_p.idw1.df, z_p.idw2.df, z_p.idw5.df)
ggplot(data = idw_df, aes(x = X, y = Y, fill = V)) + 
  geom_tile() +
  scale_fill_distiller(palette = "OrRd", trans = "reverse") +
  coord_equal() + 
  facet_wrap(~ Power, ncol = 2)

```

K-Point Means
========================================================
- Calculates spatial mean based on K-nearest neighbours of focal point
- Value of K determines the output

```{r, eval=FALSE}
kpoint.1 <- kpointmean(source_xy = source_xy, z = Walker_Lake$V, target_xy = target_xy, k = 1)
```


K-Point Means Continued...
========================================================
```{r, echo=FALSE}
target_xy = expand.grid(x = seq(0.5, 259.5, 2.2), y = seq(0.5, 299.5, 2.2))
source_xy = cbind(x = Walker_Lake$X, y = Walker_Lake$Y)
kpoint.3 <- kpointmean(source_xy = source_xy, z = Walker_Lake$V, target_xy = target_xy, k =3)
ggplot(data = kpoint.3, aes(x = x, y = y, fill = z)) +
  geom_tile() +
  scale_fill_distiller(palette = "OrRd", trans = "reverse") +
  coord_equal()


```

***

```{r, echo=FALSE}
kpoint.1 <- kpointmean(source_xy = source_xy, z = Walker_Lake$V, target_xy = target_xy, k = 1)
ggplot(data = kpoint.1, aes(x = x, y = y, fill = z)) +
  geom_tile() +
    geom_polygon(data = Walker_Lake.voronoi.t, aes(x = long, y = lat, group = group), 
               color =  "white", fill = NA) +
  scale_fill_distiller(palette = "OrRd", trans = "reverse") +
  coord_equal()
```

Concluding Remarks
========================================================
- There are multiple interpolation methods that use the nearest-neighbour approach 
- Tile-based methods are not ideal, but very accurate
- We can use other methods with a strong coefficient to represent the accuracy of voronoi polygons
